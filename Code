<html>
	<head>
		<meta charset = "utf-8">
		<title>Удобный кредитный калькулятор</title>
		
	</head>

	<body>
		<form name = "calc" class = "calc">
			<label>
				<input name = "sum" placeholder = "столько" type = "text" class = "needCheck"></abbr>
				нужная сумма
			</label>
			<label>
				<input name = "term" placeholder = "на столько" type = "text" class = "needCheck">
				срок в месяцах
			</label> 
			<label>
				<input name = "rate" placeholder = "за столько % в год" type = "text" class = "needCheck">
				годовая процентная ставка (не ПСК и не переплата)
			</label> 	
		 	<label>
				<abbr title = "Необязательное поле"><input name = "firstPayment" placeholder = "столько внесу" type = "text"></abbr>
				размер первоначального взноса (добавьте «%», если в процентах)
			</label>
			
			<h3>Тип платежей</h3>
			<label>
				<input type = "radio" name = "paymentType" value = "annuitet" checked></input>
				Все одинаковые (аннуитетные) 
			</label>
			<label> 	 
				<input type = "radio" name = "paymentType" value = "differ" ></input>
				Уменьшающиеся каждый месяц (дифференцированные) 
			</label>
			<input type = "button" value = "Расчёт">
		</form>
		<div id = "report"></div>
		<script>
		(
	function (toolboxName) {
		var toolsObj, x;
		
		window[toolboxName] = function (query, all) {
			return all ? document.querySelectorAll(query)
				: document.querySelector(query)
			;
		};
		
 		toolsObj = {
 			
 			val: (
 				function() {
 					function grab(el, onlyText) {
 					 return el instanceof Object 
 					 		? "value" in el 
 								? el.value
 								: onlyText
 									? el.innerText
 									: el.innerHTML
 							: void(0)
 						; 
 					};
 					
					return function(txt, all, onlyText) {
 						var x, el = window[toolboxName](txt, all), result;
					
						if(all) {
						 result = [];
							for(x = 0; x < el.length; x++) {
								result.push(grab(el[x], onlyText));
							}
						} else {
							result = grab(el, onlyText);
						}
 					
 						return result;
 					}
 				}
 			)(),
/**
						Функция eventForEach устанавливает обработчик для каждого элемента
			 		в переданном ей массиве. Принимает: массив элементов, тип события (c "on"),
					функцию-обработчик, аргументы для обработчика.
			*/
			eventForEach: function(elements, onevent, handler){
				var x, args = Array.prototype.slice.call(arguments, 3);
				
				for (x = 0; x < elements.length; x++) {
					
					elements[x][onevent] = (
						function(args){
							return function() {
								handler.apply(this, args);
							}
						}
					)(args);
				
				}
				
			},

			getCheckedValues: function(name) {
				var elements = document.getElementsByName(name), result = [ ];
				for(x = 0; x < elements.length; x++) {
					if(elements[x].checked) result.push(elements[x].value);
				}
				return result;
			},
			
			toBorn: function(nodeName, values, parentNode){
				var x, element = document.createElement(nodeName);
				values = values || {};
				for(x in values){
					element[x] = values[x];
				}
				if(parentNode) {
					parentNode.appendChild(element);
				}
				return element;
			},
			
		}//tools object
		
		for(x in toolsObj) {
			window[toolboxName][x] = toolsObj[x];
		}
	}// анонимная функция
	
)("gc")
		</script>
		<script>
		calculateCredit = (

	function() {
	
 		var 
 			errMsg = "Ошибочка. Проверьте введённые цифры",
			wrongResult = {
				overpay: errMsg, 
				payments: [errMsg],
				total: errMsg 
			}
		;
		
		return {
		
			differ: function(sum, term, rate) {
			 	var 
			 		overpay, payment, count, x,
			 		result = { 
						total: 0,
						overpay: 0,
						payments: [ ]
					}
			 	;
	
				for(var x in arguments) {
					arguments[x] = parseFloat(arguments[x]);
					if( isNaN( arguments[x] ) ) return wrongResult;
					if( arguments[x] === 0) arguments[x] = 0.0000000000001;
				}
				if(rate) rate = rate / 100 / 12; 
				while(term) {
					payment = sum / term;
					overpay =  sum * rate;
					result.overpay += overpay;
					count = result.payments.length; 
					result.payments.push( +(payment + overpay ).toFixed( 2 ) );
					result.total += result.payments[count];
					term--;
					sum -= payment;
				}
				result.total = result.total.toFixed(2);
				result.overpay = result.overpay.toFixed(2);
				return result
				
			},
			
			annuitet: function(sum, term, rate) {
				var 
					x, koeffAnn	,
					result = { 
						total: 0,
						overpay: 0,
						payments: [ ]
					}
				;
	
				for(var x in arguments) {
					arguments[x] = parseFloat(arguments[x]);
					if( isNaN( arguments[x] ) ) return wrongResult;
					if( arguments[x] === 0) arguments[x] = 0.0000000000001;
				}
				
				if(rate) rate = rate / 100 / 12; 
				koeffAnn = rate * Math.pow( ( 1 + rate ), term ) / (  Math.pow( ( 1 + rate ), term ) - 1 );
				result.payments.push( ( sum * koeffAnn ).toFixed( 2 ) );
				result.total = ( result.payments[0] * term ).toFixed( 2 );
				result.overpay = ( result.total - sum ).toFixed( 2 );

				return result;
			}
		}//object
		
	}//anonymous function
	
)()
		</script>
		<script>
		groupNums = (
	function() {
		var r = /(\d{3})/g;
		return function(text) {
			text = String(text);
			return text.split("").reverse().join("").replace(r, "$1 ").split("").reverse().join("");
		}
	}
)()
		</script>
		<script>
